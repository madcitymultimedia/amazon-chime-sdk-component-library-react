{"version":3,"file":"components-ui-PopOver-PopOver-mdx.f0118ea4.iframe.bundle.js","mappings":";;;;;;;;;;AA2LA;ACjLA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AAGA;AACA;AAIA;AAIA;AAIA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAKA;AACA;AAIA;AAIA;AAIA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAKA;;;AAKA;;;AAIA;;;AAMA;AACA;AAIA;AAIA;AAIA;;;;;AAKA;;;;AAIA;AACA;;;;;AAKA;AAIA;AACA;AACA;AAIA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;;;AAQA;;AAIA;;;;;;;ACnLA;AA3BA;;;AA8BA;;;;;;;;;;AACA;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;;;;ACpDA;AAEA;AAEA;;AAGA;AACA;AACA;AAEA;;;AAIA;AACA;;;;AClBA;AACA;;;;;;AAMA;AACA;;;AAKA;;;;;;;;AAUA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;;;;;;;AAOA;AACA;;;;;AAKA;;;;;;;;;AASA;;;;;;;;;;;;;AAaA;;AAIA;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;AAIA;;AAEA;;;;AAIA;;;AAGA;AACA;;;;AAMA;;;;AAIA;;;;AC/HA;AAIA","sources":["webpack://amazon-chime-sdk-component-library-react/./src/components/ui/PopOver/PopOver.stories.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/Button/Styled.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/Flex/Styled.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/Heading/Styled.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/PopOver/Styled.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/icons/Caret/index.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: Apache-2.0\\n\\nimport React from 'react';\\nimport styled from 'styled-components';\\n\\nimport PopOver from './';\\nimport PopOverItem from './PopOverItem';\\nimport PopOverSubMenu from './PopOverSubMenu';\\nimport PopOverSeparator from './PopOverSeparator';\\nimport PopOverHeader from './PopOverHeader';\\nimport Meeting from '../icons/Meeting';\\nimport Flex from '../Flex';\\nimport Heading from '../Heading';\\n\\nexport default {\\n  title: 'UI Components/PopOver',\\n  component: PopOver,\\n};\\n\\nconst StyledContents = styled.span`\\n  background-color: #0042bb;\\n  display: inline-block;\\n  border-radius: 100%;\\n  color: white;\\n  width: 2rem;\\n  height: 2rem;\\n  svg {\\n    fill: white;\\n  }\\n`;\\n\\nconst getButtonContents = (isOpen: boolean) => {\\n  const foo = isOpen ? `#0042bb` : '#075fff'; // avoiding TS prop problems.\\n  return (\\n    <StyledContents style={{ backgroundColor: `${foo}` }}>\\n      <Meeting />\\n    </StyledContents>\\n  );\\n};\\n\\nexport const BasicPopOverMenu = () => (\\n  <>\\n    <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n      <Heading tag=\\\"p\\\" level={6} mb={4}>\\n        Click the button icon to trigger the popover\\n      </Heading>\\n      <PopOver\\n        a11yLabel=\\\"Click me\\\"\\n        renderButton={(isOpen) => getButtonContents(isOpen)}\\n      >\\n        <PopOverItem\\n          as=\\\"a\\\"\\n          href=\\\"https://www.amazon.com\\\"\\n          children={<span>Visit amazon.com</span>}\\n        />\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked')}\\n          children={<span>More test content</span>}\\n        />\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked')}\\n          children={<span>Also test content</span>}\\n          checked\\n        />\\n\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked')}\\n          children={<span>This has very long text</span>}\\n        />\\n      </PopOver>\\n    </Flex>\\n  </>\\n);\\n\\nBasicPopOverMenu.story = {\\n  name: 'Basic PopOver Menu',\\n};\\n\\nexport const PersistentPopOverMenu = () => (\\n  <>\\n    <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n      <Heading tag=\\\"p\\\" level={6} mb={4}>\\n        Click the button icon to trigger the popover\\n      </Heading>\\n      <PopOver\\n        a11yLabel=\\\"Click me\\\"\\n        renderButton={(isOpen) => getButtonContents(isOpen)}\\n        closeOnClick={false}\\n      >\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked Option 1')}\\n          children={<span>Option 1</span>}\\n        />\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked Option 2')}\\n          children={<span>Option 2</span>}\\n        />\\n\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked Option 3')}\\n          children={<span>Option 3</span>}\\n        />\\n      </PopOver>\\n    </Flex>\\n  </>\\n);\\n\\nPersistentPopOverMenu.story = {\\n  name: 'Persistent PopOver Menu',\\n};\\n\\nexport const PopOverMenuWithHeader = () => (\\n  <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n    <Heading tag=\\\"p\\\" level={6} mb={4}>\\n      Click the button icon to trigger the popover\\n    </Heading>\\n    <PopOver\\n      a11yLabel=\\\"Click me\\\"\\n      renderButton={(isOpen) => getButtonContents(isOpen)}\\n    >\\n      <PopOverHeader title=\\\"Title text\\\" subtitle=\\\"Subtitle text\\\" />\\n      <PopOverItem\\n        as=\\\"button\\\"\\n        onClick={() => console.log('clicked')}\\n        children={<span>Test content</span>}\\n      />\\n      <PopOverItem\\n        as=\\\"button\\\"\\n        onClick={() => console.log('clicked')}\\n        children={<span>More test content</span>}\\n      />\\n      <PopOverItem\\n        as=\\\"button\\\"\\n        onClick={() => console.log('clicked')}\\n        children={<span>This has very long text</span>}\\n      />\\n    </PopOver>\\n  </Flex>\\n);\\n\\nPopOverMenuWithHeader.story = {\\n  name: 'PopOver Menu with Header',\\n};\\n\\nexport const PopOverMenuWithSubmenu = () => (\\n  <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n    <Heading tag=\\\"p\\\" level={6} mb={4}>\\n      Click the button icon to trigger the popover\\n    </Heading>\\n    <PopOver\\n      a11yLabel=\\\"Click me\\\"\\n      renderButton={(isOpen) => getButtonContents(isOpen)}\\n    >\\n      <PopOverItem\\n        as=\\\"button\\\"\\n        onClick={() => console.log('clicked')}\\n        children={<span>Also test content</span>}\\n        checked\\n      />\\n      <PopOverSeparator />\\n      <PopOverItem\\n        as=\\\"button\\\"\\n        onClick={() => console.log('clicked')}\\n        children={<span>This is more test content</span>}\\n      />\\n      <PopOverSubMenu text=\\\"This is a submenu\\\">\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked')}\\n          children={<span>This is also a submenu component</span>}\\n        />\\n        <PopOverItem\\n          as=\\\"button\\\"\\n          onClick={() => console.log('clicked')}\\n          children={<span>This is also a submenu component</span>}\\n        />\\n      </PopOverSubMenu>\\n      <PopOverItem\\n        as=\\\"button\\\"\\n        onClick={() => console.log('clicked')}\\n        children={<span>This has very long text</span>}\\n      />\\n    </PopOver>\\n  </Flex>\\n);\\n\\nPopOverMenuWithSubmenu.story = {\\n  name: 'PopOver Menu with Submenu',\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"BasicPopOverMenu\": {\n    \"startLoc\": {\n      \"col\": 32,\n      \"line\": 37\n    },\n    \"endLoc\": {\n      \"col\": 5,\n      \"line\": 50\n    },\n    \"startBody\": {\n      \"col\": 32,\n      \"line\": 37\n    },\n    \"endBody\": {\n      \"col\": 5,\n      \"line\": 50\n    }\n  },\n  \"PersistentPopOverMenu\": {\n    \"startLoc\": {\n      \"col\": 37,\n      \"line\": 54\n    },\n    \"endLoc\": {\n      \"col\": 5,\n      \"line\": 66\n    },\n    \"startBody\": {\n      \"col\": 37,\n      \"line\": 54\n    },\n    \"endBody\": {\n      \"col\": 5,\n      \"line\": 66\n    }\n  },\n  \"PopOverMenuWithHeader\": {\n    \"startLoc\": {\n      \"col\": 37,\n      \"line\": 70\n    },\n    \"endLoc\": {\n      \"col\": 9,\n      \"line\": 80\n    },\n    \"startBody\": {\n      \"col\": 37,\n      \"line\": 70\n    },\n    \"endBody\": {\n      \"col\": 9,\n      \"line\": 80\n    }\n  },\n  \"PopOverMenuWithSubmenu\": {\n    \"startLoc\": {\n      \"col\": 38,\n      \"line\": 84\n    },\n    \"endLoc\": {\n      \"col\": 9,\n      \"line\": 98\n    },\n    \"startBody\": {\n      \"col\": 38,\n      \"line\": 84\n    },\n    \"endBody\": {\n      \"col\": 9,\n      \"line\": 98\n    }\n  }\n};\n    \n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport PopOver from './';\nimport PopOverItem from './PopOverItem';\nimport PopOverSubMenu from './PopOverSubMenu';\nimport PopOverSeparator from './PopOverSeparator';\nimport PopOverHeader from './PopOverHeader';\nimport Meeting from '../icons/Meeting';\nimport Flex from '../Flex';\nimport Heading from '../Heading';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: Apache-2.0\\n\\nimport React from 'react';\\nimport styled from 'styled-components';\\nimport PopOver from './';\\nimport PopOverItem from './PopOverItem';\\nimport PopOverSubMenu from './PopOverSubMenu';\\nimport PopOverSeparator from './PopOverSeparator';\\nimport PopOverHeader from './PopOverHeader';\\nimport Meeting from '../icons/Meeting';\\nimport Flex from '../Flex';\\nimport Heading from '../Heading';\\nexport default {\\n  title: 'UI Components/PopOver',\\n  component: PopOver\\n};\\nconst StyledContents = styled.span`\\n  background-color: #0042bb;\\n  display: inline-block;\\n  border-radius: 100%;\\n  color: white;\\n  width: 2rem;\\n  height: 2rem;\\n  svg {\\n    fill: white;\\n  }\\n`;\\nconst getButtonContents = (isOpen: boolean) => {\\n  const foo = isOpen ? `#0042bb` : '#075fff'; // avoiding TS prop problems.\\n  return <StyledContents style={{\\n    backgroundColor: `${foo}`\\n  }}>\\n      <Meeting />\\n    </StyledContents>;\\n};\\nexport const BasicPopOverMenu = () => <>\\n    <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n      <Heading tag=\\\"p\\\" level={6} mb={4}>\\n        Click the button icon to trigger the popover\\n      </Heading>\\n      <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\n        <PopOverItem as=\\\"a\\\" href=\\\"https://www.amazon.com\\\" children={<span>Visit amazon.com</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\\n\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\n      </PopOver>\\n    </Flex>\\n  </>;\\nBasicPopOverMenu.story = {\\n  name: 'Basic PopOver Menu'\\n};\\nexport const PersistentPopOverMenu = () => <>\\n    <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n      <Heading tag=\\\"p\\\" level={6} mb={4}>\\n        Click the button icon to trigger the popover\\n      </Heading>\\n      <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)} closeOnClick={false}>\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked Option 1')} children={<span>Option 1</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked Option 2')} children={<span>Option 2</span>} />\\n\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked Option 3')} children={<span>Option 3</span>} />\\n      </PopOver>\\n    </Flex>\\n  </>;\\nPersistentPopOverMenu.story = {\\n  name: 'Persistent PopOver Menu'\\n};\\nexport const PopOverMenuWithHeader = () => <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n    <Heading tag=\\\"p\\\" level={6} mb={4}>\\n      Click the button icon to trigger the popover\\n    </Heading>\\n    <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\n      <PopOverHeader title=\\\"Title text\\\" subtitle=\\\"Subtitle text\\\" />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>Test content</span>} />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\n    </PopOver>\\n  </Flex>;\\nPopOverMenuWithHeader.story = {\\n  name: 'PopOver Menu with Header'\\n};\\nexport const PopOverMenuWithSubmenu = () => <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n    <Heading tag=\\\"p\\\" level={6} mb={4}>\\n      Click the button icon to trigger the popover\\n    </Heading>\\n    <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\\n      <PopOverSeparator />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This is more test content</span>} />\\n      <PopOverSubMenu text=\\\"This is a submenu\\\">\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\\n      </PopOverSubMenu>\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\n    </PopOver>\\n  </Flex>;\\nPopOverMenuWithSubmenu.story = {\\n  name: 'PopOver Menu with Submenu'\\n};\\nBasicPopOverMenu.parameters = {\\n  ...BasicPopOverMenu.parameters,\\n  docs: {\\n    ...BasicPopOverMenu.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => <>\\\\n    <Flex layout=\\\\\\\"fill-space-centered\\\\\\\" flexDirection=\\\\\\\"column\\\\\\\">\\\\n      <Heading tag=\\\\\\\"p\\\\\\\" level={6} mb={4}>\\\\n        Click the button icon to trigger the popover\\\\n      </Heading>\\\\n      <PopOver a11yLabel=\\\\\\\"Click me\\\\\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\\\n        <PopOverItem as=\\\\\\\"a\\\\\\\" href=\\\\\\\"https://www.amazon.com\\\\\\\" children={<span>Visit amazon.com</span>} />\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\\\\n\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\\\n      </PopOver>\\\\n    </Flex>\\\\n  </>\\\",\\n      ...BasicPopOverMenu.parameters?.docs?.source\\n    }\\n  }\\n};\\nPersistentPopOverMenu.parameters = {\\n  ...PersistentPopOverMenu.parameters,\\n  docs: {\\n    ...PersistentPopOverMenu.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => <>\\\\n    <Flex layout=\\\\\\\"fill-space-centered\\\\\\\" flexDirection=\\\\\\\"column\\\\\\\">\\\\n      <Heading tag=\\\\\\\"p\\\\\\\" level={6} mb={4}>\\\\n        Click the button icon to trigger the popover\\\\n      </Heading>\\\\n      <PopOver a11yLabel=\\\\\\\"Click me\\\\\\\" renderButton={isOpen => getButtonContents(isOpen)} closeOnClick={false}>\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked Option 1')} children={<span>Option 1</span>} />\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked Option 2')} children={<span>Option 2</span>} />\\\\n\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked Option 3')} children={<span>Option 3</span>} />\\\\n      </PopOver>\\\\n    </Flex>\\\\n  </>\\\",\\n      ...PersistentPopOverMenu.parameters?.docs?.source\\n    }\\n  }\\n};\\nPopOverMenuWithHeader.parameters = {\\n  ...PopOverMenuWithHeader.parameters,\\n  docs: {\\n    ...PopOverMenuWithHeader.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => <Flex layout=\\\\\\\"fill-space-centered\\\\\\\" flexDirection=\\\\\\\"column\\\\\\\">\\\\n    <Heading tag=\\\\\\\"p\\\\\\\" level={6} mb={4}>\\\\n      Click the button icon to trigger the popover\\\\n    </Heading>\\\\n    <PopOver a11yLabel=\\\\\\\"Click me\\\\\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\\\n      <PopOverHeader title=\\\\\\\"Title text\\\\\\\" subtitle=\\\\\\\"Subtitle text\\\\\\\" />\\\\n      <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>Test content</span>} />\\\\n      <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\\\\n      <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\\\n    </PopOver>\\\\n  </Flex>\\\",\\n      ...PopOverMenuWithHeader.parameters?.docs?.source\\n    }\\n  }\\n};\\nPopOverMenuWithSubmenu.parameters = {\\n  ...PopOverMenuWithSubmenu.parameters,\\n  docs: {\\n    ...PopOverMenuWithSubmenu.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => <Flex layout=\\\\\\\"fill-space-centered\\\\\\\" flexDirection=\\\\\\\"column\\\\\\\">\\\\n    <Heading tag=\\\\\\\"p\\\\\\\" level={6} mb={4}>\\\\n      Click the button icon to trigger the popover\\\\n    </Heading>\\\\n    <PopOver a11yLabel=\\\\\\\"Click me\\\\\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\\\n      <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\\\\n      <PopOverSeparator />\\\\n      <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>This is more test content</span>} />\\\\n      <PopOverSubMenu text=\\\\\\\"This is a submenu\\\\\\\">\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\\\\n        <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\\\\n      </PopOverSubMenu>\\\\n      <PopOverItem as=\\\\\\\"button\\\\\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\\\n    </PopOver>\\\\n  </Flex>\\\",\\n      ...PopOverMenuWithSubmenu.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"basic-pop-over-menu\": {\n        \"startLoc\": {\n          \"col\": 32,\n          \"line\": 37\n        },\n        \"endLoc\": {\n          \"col\": 5,\n          \"line\": 50\n        },\n        \"startBody\": {\n          \"col\": 32,\n          \"line\": 37\n        },\n        \"endBody\": {\n          \"col\": 5,\n          \"line\": 50\n        }\n      },\n      \"persistent-pop-over-menu\": {\n        \"startLoc\": {\n          \"col\": 37,\n          \"line\": 54\n        },\n        \"endLoc\": {\n          \"col\": 5,\n          \"line\": 66\n        },\n        \"startBody\": {\n          \"col\": 37,\n          \"line\": 54\n        },\n        \"endBody\": {\n          \"col\": 5,\n          \"line\": 66\n        }\n      },\n      \"pop-over-menu-with-header\": {\n        \"startLoc\": {\n          \"col\": 37,\n          \"line\": 70\n        },\n        \"endLoc\": {\n          \"col\": 9,\n          \"line\": 80\n        },\n        \"startBody\": {\n          \"col\": 37,\n          \"line\": 70\n        },\n        \"endBody\": {\n          \"col\": 9,\n          \"line\": 80\n        }\n      },\n      \"pop-over-menu-with-submenu\": {\n        \"startLoc\": {\n          \"col\": 38,\n          \"line\": 84\n        },\n        \"endLoc\": {\n          \"col\": 9,\n          \"line\": 98\n        },\n        \"startBody\": {\n          \"col\": 38,\n          \"line\": 84\n        },\n        \"endBody\": {\n          \"col\": 9,\n          \"line\": 98\n        }\n      }\n    }\n  }\n,},\n  title: 'UI Components/PopOver',\n  component: PopOver\n};\nconst StyledContents = styled.span`\n  background-color: #0042bb;\n  display: inline-block;\n  border-radius: 100%;\n  color: white;\n  width: 2rem;\n  height: 2rem;\n  svg {\n    fill: white;\n  }\n`;\nconst getButtonContents = (isOpen: boolean) => {\n  const foo = isOpen ? `#0042bb` : '#075fff'; // avoiding TS prop problems.\n  return <StyledContents style={{\n    backgroundColor: `${foo}`\n  }}>\n      <Meeting />\n    </StyledContents>;\n};\nexport const BasicPopOverMenu = () => <>\n    <Flex layout=\"fill-space-centered\" flexDirection=\"column\">\n      <Heading tag=\"p\" level={6} mb={4}>\n        Click the button icon to trigger the popover\n      </Heading>\n      <PopOver a11yLabel=\"Click me\" renderButton={isOpen => getButtonContents(isOpen)}>\n        <PopOverItem as=\"a\" href=\"https://www.amazon.com\" children={<span>Visit amazon.com</span>} />\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\n\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\n      </PopOver>\n    </Flex>\n  </>;;\nBasicPopOverMenu.story = {\n  name: 'Basic PopOver Menu'\n};\nexport const PersistentPopOverMenu = () => <>\n    <Flex layout=\"fill-space-centered\" flexDirection=\"column\">\n      <Heading tag=\"p\" level={6} mb={4}>\n        Click the button icon to trigger the popover\n      </Heading>\n      <PopOver a11yLabel=\"Click me\" renderButton={isOpen => getButtonContents(isOpen)} closeOnClick={false}>\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked Option 1')} children={<span>Option 1</span>} />\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked Option 2')} children={<span>Option 2</span>} />\n\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked Option 3')} children={<span>Option 3</span>} />\n      </PopOver>\n    </Flex>\n  </>;;\nPersistentPopOverMenu.story = {\n  name: 'Persistent PopOver Menu'\n};\nexport const PopOverMenuWithHeader = () => <Flex layout=\"fill-space-centered\" flexDirection=\"column\">\n    <Heading tag=\"p\" level={6} mb={4}>\n      Click the button icon to trigger the popover\n    </Heading>\n    <PopOver a11yLabel=\"Click me\" renderButton={isOpen => getButtonContents(isOpen)}>\n      <PopOverHeader title=\"Title text\" subtitle=\"Subtitle text\" />\n      <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>Test content</span>} />\n      <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\n      <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\n    </PopOver>\n  </Flex>;;\nPopOverMenuWithHeader.story = {\n  name: 'PopOver Menu with Header'\n};\nexport const PopOverMenuWithSubmenu = () => <Flex layout=\"fill-space-centered\" flexDirection=\"column\">\n    <Heading tag=\"p\" level={6} mb={4}>\n      Click the button icon to trigger the popover\n    </Heading>\n    <PopOver a11yLabel=\"Click me\" renderButton={isOpen => getButtonContents(isOpen)}>\n      <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\n      <PopOverSeparator />\n      <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>This is more test content</span>} />\n      <PopOverSubMenu text=\"This is a submenu\">\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\n        <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\n      </PopOverSubMenu>\n      <PopOverItem as=\"button\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\n    </PopOver>\n  </Flex>;\nPopOverMenuWithSubmenu.story = {\n  name: 'PopOver Menu with Submenu'\n};\nBasicPopOverMenu.parameters = {\n  ...BasicPopOverMenu.parameters,\n  docs: {\n    ...BasicPopOverMenu.parameters?.docs,\n    source: {\n      originalSource: \"() => <>\\n    <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n      <Heading tag=\\\"p\\\" level={6} mb={4}>\\n        Click the button icon to trigger the popover\\n      </Heading>\\n      <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\n        <PopOverItem as=\\\"a\\\" href=\\\"https://www.amazon.com\\\" children={<span>Visit amazon.com</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\\n\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\n      </PopOver>\\n    </Flex>\\n  </>\",\n      ...BasicPopOverMenu.parameters?.docs?.source\n    }\n  }\n};\nPersistentPopOverMenu.parameters = {\n  ...PersistentPopOverMenu.parameters,\n  docs: {\n    ...PersistentPopOverMenu.parameters?.docs,\n    source: {\n      originalSource: \"() => <>\\n    <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n      <Heading tag=\\\"p\\\" level={6} mb={4}>\\n        Click the button icon to trigger the popover\\n      </Heading>\\n      <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)} closeOnClick={false}>\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked Option 1')} children={<span>Option 1</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked Option 2')} children={<span>Option 2</span>} />\\n\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked Option 3')} children={<span>Option 3</span>} />\\n      </PopOver>\\n    </Flex>\\n  </>\",\n      ...PersistentPopOverMenu.parameters?.docs?.source\n    }\n  }\n};\nPopOverMenuWithHeader.parameters = {\n  ...PopOverMenuWithHeader.parameters,\n  docs: {\n    ...PopOverMenuWithHeader.parameters?.docs,\n    source: {\n      originalSource: \"() => <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n    <Heading tag=\\\"p\\\" level={6} mb={4}>\\n      Click the button icon to trigger the popover\\n    </Heading>\\n    <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\n      <PopOverHeader title=\\\"Title text\\\" subtitle=\\\"Subtitle text\\\" />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>Test content</span>} />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>More test content</span>} />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\n    </PopOver>\\n  </Flex>\",\n      ...PopOverMenuWithHeader.parameters?.docs?.source\n    }\n  }\n};\nPopOverMenuWithSubmenu.parameters = {\n  ...PopOverMenuWithSubmenu.parameters,\n  docs: {\n    ...PopOverMenuWithSubmenu.parameters?.docs,\n    source: {\n      originalSource: \"() => <Flex layout=\\\"fill-space-centered\\\" flexDirection=\\\"column\\\">\\n    <Heading tag=\\\"p\\\" level={6} mb={4}>\\n      Click the button icon to trigger the popover\\n    </Heading>\\n    <PopOver a11yLabel=\\\"Click me\\\" renderButton={isOpen => getButtonContents(isOpen)}>\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>Also test content</span>} checked />\\n      <PopOverSeparator />\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This is more test content</span>} />\\n      <PopOverSubMenu text=\\\"This is a submenu\\\">\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\\n        <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This is also a submenu component</span>} />\\n      </PopOverSubMenu>\\n      <PopOverItem as=\\\"button\\\" onClick={() => console.log('clicked')} children={<span>This has very long text</span>} />\\n    </PopOver>\\n  </Flex>\",\n      ...PopOverMenuWithSubmenu.parameters?.docs?.source\n    }\n  }\n};","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled, { css } from 'styled-components';\n\nimport { visuallyHidden } from '../../../utils/style';\nimport { baseSpacing, baseStyles } from '../Base';\nimport { ButtonProps } from './';\n\nexport const StyledButton = styled.button<ButtonProps>`\n  border-radius: ${(props) => props.theme.radii.default};\n  font-size: ${(props) => props.theme.fontSizes.text.fontSize};\n  padding: 0.5rem 1rem;\n  border-color: transparent;\n  transition: background-color 0.1s ease;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  .ch-icon {\n    width: ${(props) => props.theme.iconButtonSizes[props.iconSize || 'sm']};\n    height: ${(props) => props.theme.iconButtonSizes[props.iconSize || 'sm']};\n    margin-right: 0.25rem;\n  }\n\n  /* variant styles */\n  ${(props) => props.variant === 'primary' && StyledPrimaryButton}\n  ${(props) => props.variant === 'secondary' && StyledSecondaryButton}\n  ${(props) => props.variant === 'icon' && StyledIconButton}\n\n  ${baseSpacing}\n  ${baseStyles}\n`;\n\nexport const StyledPrimaryButton = css<ButtonProps>`\n  background-color: ${(props) =>\n    props.selected\n      ? props.theme.buttons.primary.selected.bgd\n      : props.theme.buttons.primary.static.bgd};\n  color: ${(props) =>\n    props.selected\n      ? props.theme.buttons.primary.selected.text\n      : props.theme.buttons.primary.static.text};\n  border: ${(props) =>\n    props.selected\n      ? props.theme.buttons.primary.selected.border\n      : props.theme.buttons.primary.static.border};\n  box-shadow: ${(props) => props.theme.buttons.primary.static.shadow};\n\n  &:focus {\n    background-color: ${(props) => props.theme.buttons.primary.focus.bgd};\n    border: ${(props) => props.theme.buttons.primary.focus.border};\n    color: ${(props) => props.theme.buttons.primary.focus.text};\n    box-shadow: ${(props) => props.theme.buttons.primary.focus.shadow};\n  }\n\n  &:hover {\n    background-color: ${(props) => props.theme.buttons.primary.hover.bgd};\n    border: ${(props) => props.theme.buttons.primary.hover.border};\n    color: ${(props) => props.theme.buttons.primary.hover.text};\n    box-shadow: ${(props) => props.theme.buttons.primary.hover.shadow};\n  }\n\n  &:focus:hover {\n    box-shadow: ${(props) => props.theme.buttons.primary.focus.shadow};\n  }\n\n  &:active {\n    background-color: ${(props) => props.theme.buttons.primary.active.bgd};\n    border: ${(props) => props.theme.buttons.primary.active.border};\n    color: ${(props) => props.theme.buttons.primary.active.text};\n    box-shadow: ${(props) => props.theme.buttons.primary.active.shadow};\n  }\n\n  &:disabled {\n    background-color: ${(props) => props.theme.buttons.primary.disabled.bgd};\n    border: ${(props) => props.theme.buttons.primary.disabled.border};\n    color: ${(props) => props.theme.buttons.primary.disabled.text};\n    cursor: not-allowed;\n  }\n`;\n\nexport const StyledSecondaryButton = css<ButtonProps>`\n  background-color: ${(props) =>\n    props.selected\n      ? props.theme.buttons.secondary.selected.bgd\n      : props.theme.buttons.secondary.static.bgd};\n  color: ${(props) =>\n    props.selected\n      ? props.theme.buttons.secondary.selected.text\n      : props.theme.buttons.secondary.static.text};\n  border: ${(props) =>\n    props.selected\n      ? props.theme.buttons.secondary.selected.border\n      : props.theme.buttons.secondary.static.border};\n  box-shadow: ${(props) => props.theme.buttons.secondary.shadow};\n\n  &:focus {\n    background-color: ${(props) => props.theme.buttons.secondary.focus.bgd};\n    border: ${(props) => props.theme.buttons.secondary.focus.border};\n    color: ${(props) => props.theme.buttons.secondary.focus.text};\n    box-shadow: ${(props) => props.theme.buttons.secondary.focus.shadow};\n  }\n\n  &:hover {\n    background-color: ${(props) => props.theme.buttons.secondary.hover.bgd};\n    border: ${(props) => props.theme.buttons.secondary.hover.border};\n    color: ${(props) => props.theme.buttons.secondary.hover.text};\n    box-shadow: ${(props) => props.theme.buttons.secondary.hover.shadow};\n  }\n\n  &:focus:hover {\n    box-shadow: ${(props) => props.theme.buttons.secondary.focus.shadow};\n  }\n\n  &:active {\n    background-color: ${(props) => props.theme.buttons.secondary.active.bgd};\n    border: ${(props) => props.theme.buttons.secondary.active.border};\n    color: ${(props) => props.theme.buttons.secondary.active.text};\n    box-shadow: ${(props) => props.theme.buttons.secondary.focus.shadow};\n  }\n\n  &:disabled {\n    background-color: ${(props) => props.theme.buttons.secondary.disabled.bgd};\n    border: ${(props) => props.theme.buttons.secondary.disabled.border};\n    color: ${(props) => props.theme.buttons.secondary.disabled.text};\n    cursor: not-allowed;\n  }\n`;\n\nconst badgeLayout = {\n  sm: css`\n    top: -15%;\n    left: 76%;\n  `,\n  md: css`\n    top: 4%;\n    left: 76%;\n  `,\n  lg: css`\n    top: 10%;\n    left: 76%;\n  `,\n};\n\nexport const StyledIconButton = css<ButtonProps>`\n  background-color: ${(props) =>\n    props.selected\n      ? props.theme.buttons.icon.selected.bgd\n      : props.theme.buttons.icon.static.bgd};\n  color: ${(props) =>\n    props.selected\n      ? props.theme.buttons.icon.selected.text\n      : props.theme.buttons.icon.static.text};\n  border: ${(props) =>\n    props.selected\n      ? props.theme.buttons.icon.selected.border\n      : props.theme.buttons.icon.static.border};\n  border-radius: ${(props) => props.theme.radii.circle};\n  padding: 0.1875rem;\n  position: relative;\n\n  > .ch-label {\n    ${visuallyHidden};\n  }\n\n  > .ch-icon {\n    width: ${(props) => props.theme.iconButtonSizes[props.iconSize || 'sm']};\n    height: ${(props) => props.theme.iconButtonSizes[props.iconSize || 'sm']};\n    margin: 0;\n  }\n\n  &:focus {\n    background-color: ${({ theme, selected }) =>\n      selected\n        ? theme.buttons.icon.selected.bgd\n        : theme.buttons.icon.static.bgd};\n    border: ${(props) => props.theme.buttons.icon.focus.border};\n    color: ${(props) => props.theme.buttons.icon.focus.text};\n    color: ${({ theme, selected }) =>\n      selected\n        ? theme.buttons.icon.selected.text\n        : theme.buttons.icon.static.text};\n    box-shadow: ${(props) => props.theme.buttons.icon.focus.shadow};\n  }\n\n  &:hover {\n    background-color: ${(props) => props.theme.buttons.icon.hover.bgd};\n    border: ${(props) => props.theme.buttons.icon.hover.border};\n    color: ${(props) => props.theme.buttons.icon.hover.text};\n  }\n\n  &:active {\n    background-color: ${(props) => props.theme.buttons.icon.active.bgd};\n    border: ${(props) => props.theme.buttons.icon.active.border};\n    color: ${(props) => props.theme.buttons.icon.active.text};\n  }\n\n  &:disabled {\n    background-color: ${(props) => props.theme.buttons.icon.disabled.bgd};\n    border: ${(props) => props.theme.buttons.icon.disabled.border};\n    color: ${(props) => props.theme.buttons.icon.disabled.text};\n    cursor: not-allowed;\n  }\n\n  + * {\n    position: absolute;\n    font-size: 0.55rem;\n    z-index: 1;\n    ${({ iconSize }) => (iconSize ? badgeLayout[iconSize] : badgeLayout['sm'])}\n  }\n`;\n\nexport const StyledIconButtonWrapper = styled.span`\n  display: inline-block;\n  position: relative;\n`;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled, { css } from 'styled-components';\n\nimport { baseSpacing, baseStyles } from '../Base';\nimport { FlexProps } from './';\n\nexport const fillSpace = css`\n  display: flex;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const fillSpaceCentered = css`\n  ${fillSpace};\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const equalColumns = css`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  align-items: stretch;\n\n  > * {\n    flex-grow: 1;\n    flex-basis: 50%;\n  }\n`;\n\nexport const stack = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > * {\n    width: 100%;\n  }\n`;\n\nconst layoutMap = {\n  'fill-space': fillSpace,\n  'fill-space-centered': fillSpaceCentered,\n  'equal-columns': equalColumns,\n  stack,\n};\n\nexport const StyledFlex = styled.div<FlexProps>`\n  align-items: ${(props) => props.alignItems};\n  display: ${(props) => (props.container ? 'flex' : 'block')};\n  flex: ${(props) => props.flex || ''};\n  flex-basis: ${(props) => props.flexBasis};\n  flex-direction: ${(props) => props.flexDirection};\n  flex-grow: ${(props) => props.flexGrow || ''};\n  flex-shrink: ${(props) => props.flexShrink};\n  flex-wrap: ${(props) => props.flexWrap};\n  justify-content: ${(props) => props.justifyContent};\n\n  // layout variants\n  ${(props) => !!props.layout && layoutMap[props.layout]}\n\n  ${baseSpacing}\n  ${baseStyles}\n`;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled from 'styled-components';\n\nimport { baseSpacing, baseStyles } from '../Base';\nimport { HeadingProps } from './';\n\nexport const StyledHeading = styled.h1<HeadingProps>`\n  display: block;\n  margin: 0;\n\n  font-size: ${(props) =>\n    props.theme.fontSizes[`h${props.level}`].mobile.fontSize};\n  font-weight: ${(props) =>\n    props.theme.fontSizes[`h${props.level}`].mobile.fontWeight};\n  line-height: ${(props) =>\n    props.theme.fontSizes[`h${props.level}`].mobile.lineHeight};\n\n  ${({ theme }) => theme.mediaQueries.min.md} {\n    font-size: ${(props) => props.theme.fontSizes[`h${props.level}`].fontSize};\n    font-weight: ${(props) =>\n      props.theme.fontSizes[`h${props.level}`].fontWeight};\n    line-height: ${(props) =>\n      props.theme.fontSizes[`h${props.level}`].lineHeight};\n  }\n\n  ${baseSpacing}\n  ${baseStyles}\n`;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled from 'styled-components';\n\nimport { ellipsis } from '../../../utils/style';\n\nexport const StyledPopOverMenu = styled.ul`\n  width: fit-content;\n  max-width: 22rem;\n  background-color: ${(props) => props.theme.popOver.menuBgd};\n  border: ${(props) => props.theme.popOver.menuBorder};\n  margin: 0;\n  border-radius: 0.25rem;\n  backdrop-filter: blur(1rem);\n  list-style: none;\n  padding: 0.5rem 0;\n  box-shadow: ${(props) => props.theme.popOver.shadow};\n  z-index: ${(props) => props.theme.zIndex.popOver};\n  display: table;\n  overflow: inherit;\n`;\n\nexport const StyledPopOverToggle = styled.button`\n  background-color: transparent;\n  padding: 0;\n  border: none;\n  cursor: pointer;\n  &:focus {\n    outline: 0;\n  }\n`;\n\nexport const StyledPopOverItem = styled.li`\n  height: 2rem;\n  position: relative;\n\n  button,\n  a {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    border: none;\n    cursor: pointer;\n    background-color: ${(props) => props.theme.popOver.itemBgd};\n    color: ${(props) => props.theme.popOver.itemText};\n    line-height: ${(props) => props.theme.fontSizes.text.lineHeight};\n    font-size: ${(props) => props.theme.fontSizes.text.fontSize};\n    padding: 0 2.5rem;\n    text-decoration: none;\n    outline: 0;\n\n    &:hover,\n    &:focus {\n      background-color: ${(props) => props.theme.popOver.active.itemBgd};\n      color: ${(props) => props.theme.popOver.active.itemText};\n      outline: 0;\n    }\n\n    &:disabled {\n      color: ${(props) => props.theme.popOver.disabled};\n    }\n  }\n\n  a {\n    width: unset;\n  }\n\n  .ch-content > * {\n    ${ellipsis};\n  }\n\n  .ch-check {\n    position: absolute;\n    left: 0.5rem;\n    width: 1.5rem;\n    height: 1.5rem;\n    top: 0.33rem;\n  }\n\n  &:hover .ch-check g,\n  &:focus .ch-check g {\n    fill: ${(props) => props.theme.popOver.active.itemText};\n  }\n`;\n\nexport const StyledSubMenu = styled(StyledPopOverItem)`\n  > span {\n    width: 100%;\n    height: 100%;\n    display: block;\n    height: 2rem;\n  }\n\n  > button {\n    position: relative;\n  }\n\n  .ch-caret {\n    position: absolute;\n    width: 1.5rem;\n    height: 1.5rem;\n    right: 0;\n    color: inherit;\n    fill: inherit;\n  }\n`;\n\nexport const StyledPopOverHeader = styled.header`\n  border-bottom: 0.0625rem solid ${(props) => props.theme.popOver.separator};\n  margin-bottom: 0.75rem;\n  max-width: 22rem;\n\n  img {\n    width: 100%;\n    display: inline-block;\n    margin-top: -0.5rem;\n    border-radius: 0.25rem 0.25rem 0 0;\n  }\n\n  img + .ch-title {\n    margin-top: 0.75rem;\n  }\n\n  .ch-title {\n    ${ellipsis};\n    padding: 0 2.5rem;\n    margin-top: 0.5rem;\n    margin-bottom: 0;\n    color: ${(props) => props.theme.popOver.titleText};\n    font-size: 1.18125rem;\n    line-height: ${(props) => props.theme.fontSizes.text.lineHeight};\n  }\n\n  .ch-subtitle {\n    ${ellipsis};\n    padding: 0 2.5rem;\n    color: #616672;\n    font-size: ${(props) => props.theme.fontSizes.text.fontSize};\n    line-height: ${(props) => props.theme.fontSizes.text.lineHeight};\n    line-height: 1.43;\n    margin: 0 0 1rem;\n  }\n`;\n\nexport const StyledPopOverSeparator = styled.li`\n  margin: 0;\n  border-width: 0.0625rem 0 0 0;\n  border-style: solid;\n  border-color: ${(props) => props.theme.popOver.separator};\n  margin-bottom: 0.75rem;\n  opacity: 0.8;\n`;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { Direction } from '../../../../types';\nimport Svg, { SvgProps } from '../Svg';\n\nconst dirTransform = {\n  up: '0',\n  right: '90',\n  down: '180',\n  left: '270',\n};\n\ninterface CaretProps extends SvgProps {\n  /** Defines the direction of the caret. */\n  direction?: Direction;\n  className?: string;\n}\n\nconst StyledCaret = styled(Svg)<CaretProps>`\n  transform: ${({ direction }) =>\n    `rotate(${dirTransform[direction || 'up']}deg)`};\n`;\n\nexport const Caret: React.FC<React.PropsWithChildren<CaretProps>> = ({\n  direction = 'up',\n  ...rest\n}) => {\n  return (\n    <StyledCaret direction={direction} {...rest}>\n      <path\n        transform-origin=\"center\"\n        d=\"M8.824 13.88c-.21.18-.526.154-.705-.056-.159-.187-.156-.457-.006-.64l.063-.065 3.523-3c.165-.14.397-.156.577-.05l.074.052 3.477 3c.209.18.232.497.052.706-.16.185-.428.224-.632.104l-.074-.052-3.151-2.72-3.198 2.722z\"\n      />\n    </StyledCaret>\n  );\n};\n\nCaret.displayName = 'Caret';\n\nexport default Caret;\n"],"names":[],"sourceRoot":""}